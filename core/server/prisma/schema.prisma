generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DB_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model User {
  id                      String                      @id @default(uuid())
  name                    String
  isAdmin                 Boolean                     @map("is_admin")
  tabs                    Tab[]
  gglSmarthomeIntegration GoogleSmartHomeIntegration?

  @@map("users")
}

model GoogleSmartHomeIntegration {
  id                 Int       @id @default(autoincrement())
  userId             String    @unique @map("user_id")
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  code               String?   @unique
  codeExpires        DateTime? @map("code_expires")
  accessToken        String?   @unique @map("access_token")
  refreshToken       String?   @unique @map("refresh_token")
  accessTokenExpires DateTime? @map("access_token_expires")

  @@map("ggl_smarthome_integrations")
}

model Tab {
  id      Int      @id @default(autoincrement())
  name    String
  users   User[]
  widgets Widget[]

  @@map("tabs")
}

model Widget {
  id         Int               @id @default(autoincrement())
  customId   String            @map("custom_id")
  tabId      Int               @map("tab_id")
  tab        Tab               @relation(fields: [tabId], references: [id])
  deviceId   Int               @map("device_id")
  device     Device            @relation(fields: [deviceId], references: [id])
  type       String
  x          Int
  y          Int
  width      Int
  height     Int
  properties WidgetProperties?

  @@unique([x, y, tabId]) // no widgets can have the same coordinates on the same tab
  @@map("widgets")
}

model WidgetProperties {
  id         Int      @id @default(autoincrement())
  widgetId   Int      @map("widget_id")
  widget     Widget   @relation(fields: [widgetId], references: [id])
  title      String?
  color      String?
  text       String?
  onText     String?  @map("on_text")
  offText    String?  @map("off_text")
  isSwitch   Boolean? @map("is_switch")
  isVertical Boolean? @map("is_vertical")
  step       Float?
  min        Float?
  max        Float?

  @@unique([widgetId])
  @@map("widget_properties")
}

model Device {
  id      Int      @id @default(autoincrement())
  token   String   @default(uuid())
  name    String
  widgets Widget[]

  @@unique([token])
  @@map("devices")
}

// TODO: remove in favor of redis
model Value {
  deviceId Int    @map("device_id")
  customId String @map("custom_id")
  value    String

  @@id([deviceId, customId])
  @@map("values")
}
